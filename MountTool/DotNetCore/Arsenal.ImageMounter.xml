<?xml version="1.0"?>
<doc>
<assembly>
<name>
Arsenal.ImageMounter
</name>
</assembly>
<members>
<member name="T:Arsenal.ImageMounter.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Arsenal.ImageMounter.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Arsenal.ImageMounter.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Arsenal.ImageMounter.API">
 <summary>
 API for manipulating flag values, issuing SCSI bus rescans, manage write filter driver and similar tasks.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.API.EnumerateAdapterDevicePaths(System.IntPtr)">
 <summary>
 Builds a list of device paths for active Arsenal Image Mounter
 objects.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.API.AdapterDevicePresent">
 <summary>
 Returns a value indicating whether Arsenal Image Mounter driver is
 installed and running.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.API.EnumerateAdapterDeviceInstances">
 <summary>
 Builds a list of setup device ids for active Arsenal Image Mounter
 objects. Device ids are used in calls to plug-and-play setup functions.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.API.EnumerateAdapterDeviceInstanceNames">
 <summary>
 Builds a list of setup device ids for active Arsenal Image Mounter
 objects. Device ids are used in calls to plug-and-play setup functions.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.API.RescanScsiAdapter(System.UInt32)">
 <summary>
 Issues a SCSI bus rescan on found Arsenal Image Mounter adapters. This causes Disk Management
 in Windows to find newly created virtual disks and remove newly deleted ones.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.API.GetWriteOverlayStatus(System.String,Arsenal.ImageMounter.IO.WriteFilterStatistics@)">
 <summary>
 Retrieves status of write overlay for mounted device.
 </summary>
 <param name="NtDevicePath">NT path to device.</param>
 <param name="Statistics">Data structure that receives current statistics and settings for filter</param>
 <returns>Returns 0 on success or Win32 error code on failure</returns>
</member>
<member name="M:Arsenal.ImageMounter.API.GetWriteOverlayStatus(Microsoft.Win32.SafeHandles.SafeFileHandle,Arsenal.ImageMounter.IO.WriteFilterStatistics@)">
 <summary>
 Retrieves status of write overlay for mounted device.
 </summary>
 <param name="hDevice">Handle to device.</param>
 <param name="Statistics">Data structure that receives current statistics and settings for filter</param>
 <returns>Returns 0 on success or Win32 error code on failure</returns>
</member>
<member name="M:Arsenal.ImageMounter.API.SetWriteOverlayDeleteOnClose(System.String)">
 <summary>
 Deletes the write overlay image file after use. Also sets this filter driver to
 silently ignore flush requests to improve performance when integrity of the write
 overlay image is not needed for future sessions.
 </summary>
 <param name="NtDevicePath">NT path to device.</param>
 <returns>Returns 0 on success or Win32 error code on failure</returns>
</member>
<member name="M:Arsenal.ImageMounter.API.SetWriteOverlayDeleteOnClose(Microsoft.Win32.SafeHandles.SafeFileHandle)">
 <summary>
 Deletes the write overlay image file after use. Also sets this filter driver to
 silently ignore flush requests to improve performance when integrity of the write
 overlay image is not needed for future sessions.
 </summary>
 <param name="hDevice">Handle to device.</param>
 <returns>Returns 0 on success or Win32 error code on failure</returns>
</member>
<member name="T:Arsenal.ImageMounter.DeviceObject">
 <summary>
 Base class that represents Arsenal Image Mounter SCSI miniport created device objects.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DeviceObject.#ctor(System.ReadOnlyMemory{System.Char})">
 <summary>
 Opens specified Path with CreateFile Win32 API and encapsulates the returned handle
 in a new DeviceObject.
 </summary>
 <param name="Path">Path to pass to CreateFile API</param>
</member>
<member name="M:Arsenal.ImageMounter.DeviceObject.#ctor(System.ReadOnlyMemory{System.Char},System.IO.FileAccess)">
 <summary>
 Opens specified Path with CreateFile Win32 API and encapsulates the returned handle
 in a new DeviceObject.
 </summary>
 <param name="Path">Path to pass to CreateFile API</param>
 <param name="AccessMode">Access mode for opening and for underlying FileStream</param>
</member>
<member name="M:Arsenal.ImageMounter.DeviceObject.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
 <summary>
 Encapsulates a handle in a new DeviceObject.
 </summary>
 <param name="Handle">Existing handle to use</param>
 <param name="Access">Access mode for underlying FileStream</param>
</member>
<member name="M:Arsenal.ImageMounter.DeviceObject.Dispose">
 <summary>
 Close device object.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.DiskDevice">
 <summary>
 Represents disk objects, attached to a virtual or physical SCSI adapter.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.DevicePath">
 <summary>
 Returns the device path used to open this device object, if opened by name.
 If the object was opened in any other way, such as by supplying an already
 open handle, this property returns null/Nothing.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.#ctor(System.ReadOnlyMemory{System.Char})">
 <summary>
 Opens an disk device object without requesting read or write permissions. The
 resulting object can only be used to query properties like SCSI address, disk
 size and similar, but not for reading or writing raw disk data.
 </summary>
 <param name="DevicePath"></param>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.#ctor(System.ReadOnlyMemory{System.Char},System.IO.FileAccess)">
 <summary>
 Opens an disk device object, requesting read, write or both permissions.
 </summary>
 <param name="DevicePath"></param>
 <param name="AccessMode"></param>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.#ctor(System.String)">
 <summary>
 Opens an disk device object without requesting read or write permissions. The
 resulting object can only be used to query properties like SCSI address, disk
 size and similar, but not for reading or writing raw disk data.
 </summary>
 <param name="DevicePath"></param>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.#ctor(System.String,System.IO.FileAccess)">
 <summary>
 Opens an disk device object, requesting read, write or both permissions.
 </summary>
 <param name="DevicePath"></param>
 <param name="AccessMode"></param>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.#ctor(Arsenal.ImageMounter.IO.SCSI_ADDRESS,System.IO.FileAccess)">
 <summary>
 Opens an disk device object.
 </summary>
 <param name="ScsiAddress"></param>
 <param name="AccessMode"></param>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.DeviceNumber">
 <summary>
 Retrieves device number for this disk on the owner SCSI adapter.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.ScsiAddress">
 <summary>
 Retrieves SCSI address for this disk.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.StorageDeviceNumber">
 <summary>
 Retrieves storage device type and physical disk number information.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.StorageStandardProperties">
 <summary>
 Retrieves StorageStandardProperties information.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.TrimEnabled">
 <summary>
 Retrieves TRIM enabled information.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.EnumerateDiskVolumes">
 <summary>
 Enumerates disk volumes that use extents of this disk.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.OpenAdapter">
 <summary>
 Opens SCSI adapter that created this virtual disk.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.UpdateProperties">
 <summary>
 Updates disk properties by re-enumerating partition table.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.GetVolumeDiskExtents">
 <summary>
 Retrieves the physical location of a specified volume on one or more disks. 
 </summary>
 <returns></returns>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.DiskSignature">
 <summary>
 Gets or sets disk signature stored in boot record.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.VBRHiddenSectorsCount">
 <summary>
 Gets or sets disk signature stored in boot record.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.ReadBootSector">
 <summary>
 Reads first sector of disk or disk volume
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.HasValidPartitionTable">
 <summary>
 Return a value indicating whether present sector 0 data indicates a valid MBR
 with a partition table.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.HasValidBootCode">
 <summary>
 Return a value indicating whether present sector 0 data indicates a valid MBR
 with a partition table and not blank or fake boot code.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.FlushBuffers">
 <summary>
 Flush buffers for a disk or volume.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.DiskPolicyOffline">
 <summary>
 Gets or sets physical disk offline attribute. Only valid for
 physical disk objects, not volumes or partitions.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.DiskPolicyReadOnly">
 <summary>
 Gets or sets physical disk read only attribute. Only valid for
 physical disk objects, not volumes or partitions.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.SetVolumeOffline(System.Boolean)">
 <summary>
 Sets disk volume offline attribute. Only valid for logical
 disk volumes, not physical disk drives.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.PartitionInformation">
 <summary>
 Gets information about a partition stored on a disk with MBR
 partition layout. This property is not available for physical
 disks, only disk partitions are supported.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.PartitionInformationEx">
 <summary>
 Gets information about a disk partition. This property is not
 available for physical disks, only disk partitions are supported.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.DriveLayoutEx">
 <summary>
 Gets information about a disk partitions. This property is available
 for physical disks, not disk partitions.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.InitializeDisk(Arsenal.ImageMounter.IO.PARTITION_STYLE)">
 <summary>
 Initialize a raw disk device for use with Windows. This method is available
 for physical disks, not disk partitions.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.DiskId">
 <summary>
 Disk identifier string.
 </summary>
 <returns>8 digit hex string for MBR disks or disk GUID for
 GPT disks.</returns>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.QueryDevice(System.UInt32@,System.Int64@,System.UInt32@,System.Int64@,Arsenal.ImageMounter.DeviceFlags@,System.String@)">
 <summary>
 Retrieves properties for an existing virtual disk.
 </summary>
 <param name="DeviceNumber">Device number of virtual disk.</param>
 <param name="DiskSize">Size of virtual disk.</param>
 <param name="BytesPerSector">Number of bytes per sector for virtual disk geometry.</param>
 <param name="ImageOffset">A skip offset if virtual disk data does not begin immediately at start of disk image file.
 Frequently used with image formats like Nero NRG which start with a file header not used by Arsenal Image Mounter or Windows
 filesystem drivers.</param>
 <param name="Flags">Flags specifying properties for virtual disk. See comments for each flag value.</param>
 <param name="Filename">Name of disk image file holding storage for file type virtual disk or used to create a
 virtual memory type virtual disk.</param>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.QueryDevice(System.UInt32@,System.Int64@,System.UInt32@,System.Int64@,Arsenal.ImageMounter.DeviceFlags@,System.String@,System.String@)">
 <summary>
 Retrieves properties for an existing virtual disk.
 </summary>
 <param name="DeviceNumber">Device number of virtual disk.</param>
 <param name="DiskSize">Size of virtual disk.</param>
 <param name="BytesPerSector">Number of bytes per sector for virtual disk geometry.</param>
 <param name="ImageOffset">A skip offset if virtual disk data does not begin immediately at start of disk image file.
 Frequently used with image formats like Nero NRG which start with a file header not used by Arsenal Image Mounter or Windows
 filesystem drivers.</param>
 <param name="Flags">Flags specifying properties for virtual disk. See comments for each flag value.</param>
 <param name="Filename">Name of disk image file holding storage for file type virtual disk or used to create a
 virtual memory type virtual disk.</param>
 <param name="WriteOverlayImagefile">Path to differencing file used in write-temporary mode.</param>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.QueryDevice">
 <summary>
 Retrieves properties for an existing virtual disk.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.RemoveDevice">
 <summary>
 Removes this virtual disk from adapter.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.DiskSize">
 <summary>
 Retrieves volume size of disk device.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.VolumeSizeInformation">
 <summary>
 Retrieves partition information.
 </summary>
 <returns></returns>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.IsDiskWritable">
 <summary>
 Determines whether disk is writable or read-only.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.Geometry">
 <summary>
 Returns logical disk geometry. Normally, only the BytesPerSector member
 contains data of interest.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.DismountVolumeFilesystem(System.Boolean)">
 <summary>
 Locks and dismounts filesystem on a volume. Upon successful return, further access to the device
 can only be done through this device object instance until it is either closed (disposed) or lock is
 released on the underlying handle.
 </summary>
 <param name="Force">Indicates if True that volume should be immediately dismounted even if it
 cannot be locked. This causes all open handles to files on the volume to become invalid. If False,
 successful lock (no other open handles) is required before attempting to dismount filesystem.</param>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.DismountVolumeFilesystemAsync(System.Boolean,System.Threading.CancellationToken)">
 <summary>
 Locks and dismounts filesystem on a volume. Upon successful return, further access to the device
 can only be done through this device object instance until it is either closed (disposed) or lock is
 released on the underlying handle.
 </summary>
 <param name="Force">Indicates if True that volume should be immediately dismounted even if it
 cannot be locked. This causes all open handles to files on the volume to become invalid. If False,
 successful lock (no other open handles) is required before attempting to dismount filesystem.</param>
</member>
<member name="P:Arsenal.ImageMounter.DiskDevice.WriteOverlayStatus">
 <summary>
 Get live statistics from write filter driver.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.SetWriteOverlayDeleteOnClose">
 <summary>
 Deletes the write overlay image file after use. Also sets the filter driver to
 silently ignore flush requests to improve performance when integrity of the write
 overlay image is not needed for future sessions.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskDevice.GetRawDiskStream">
 <summary>
 Returns an DiskStream object that can be used to directly access disk data.
 The returned stream automatically sector-aligns I/O.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.DiskStream">
 <summary>
 A FileStream derived class that represents disk devices by overriding properties and methods
 where FileStream base implementation rely on file API not directly compatible with disk device
 objects.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
 <summary>
 Initializes an DiskStream object for an open disk device.
 </summary>
 <param name="SafeFileHandle">Open file handle for disk device.</param>
 <param name="AccessMode">Access to request for stream.</param>
</member>
<member name="M:Arsenal.ImageMounter.DiskStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int64)">
 <summary>
 Initializes an DiskStream object for an open disk device.
 </summary>
 <param name="SafeFileHandle">Open file handle for disk device.</param>
 <param name="AccessMode">Access to request for stream.</param>
 <param name="DiskSize">Size that should be returned by Length property</param>
</member>
<member name="P:Arsenal.ImageMounter.DiskStream.Length">
 <summary>
 Retrieves raw disk size.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskStream.SetLength(System.Int64)">
 <summary>
 Not implemented.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.DiskStream.GetVBRPartitionLength">
 <summary>
 Get partition length as indicated by VBR. Valid for volumes with formatted file system.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.DeviceFlags">
 <summary>
 Values for flag fields used when creating, querying or modifying virtual disks.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.None">
 <summary>
 Placeholder for empty flag field.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.ReadOnly">
 <summary>
 Creates a read-only virtual disk.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.Removable">
 <summary>
 Creates a virtual disk with "removable" properties reported to the operating system.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.SparseFile">
 <summary>
 Specifies that image files are created with sparse attribute.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.DeviceTypeHD">
 <summary>
 Creates a virtual disk with device type hard disk volume.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.DeviceTypeFD">
 <summary>
 Creates a virtual disk with device type floppy disk.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.DeviceTypeCD">
 <summary>
 Creates a virtual disk with device type CD-ROM/DVD-ROM etc.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.TypeFile">
 <summary>
 Creates a virtual disk backed by a image file on disk. The Filename parameter specifies image file to use.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.TypeVM">
 <summary>
 Creates a virtual disk backed by virtual memory. If Filename parameter is also specified, contents of that file
 will be loaded to the virtual memory before driver starts to service I/O requests for it.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.TypeProxy">
 <summary>
 Creates a virtual disk for which storage is provided by an I/O proxy application.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.ProxyTypeDirect">
 <summary>
 Specifies that proxy application will be contacted directly through a named pipe. The Filename parameter specifies
 path to named pipe.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.ProxyTypeComm">
 <summary>
 Specifies that proxy application will be contacted through a serial communications port. The Filename parameter
 specifies port optionally followed by colon, space and a port configuration string using same format as MODE COM
 command. Example: "COM1: BAUD=9600 PARITY=N STOP=1 DATA=8"
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.ProxyTypeTCP">
 <summary>
 Specifies that proxy application will be contacted through a TCP/IP port. The Filename parameter specifies host
 name or IP address optionally followed by colon and port number. If port number is omitted a default value of 9000
 is used.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.ProxyTypeSharedMemory">
 <summary>
 Specifies that proxy application will be contacted through shared memory. The Filename parameter specifies object
 name of shared memory block and synchronization event objects.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.FileTypeQueued">
 <summary>
 Image file accessed using queued I/O requests.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.FileTypeAwe">
 <summary>
 Copy image file into physical memory block (AWE). No changes are written
 back to image file.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.FileTypeParallel">
 <summary>
 Image file accessed using direct parallel I/O requests. Requires lower level driver to be callable at
 DISPATCH_LEVEL, otherwise IRQL_NOT_LESS_THAN_OR_EQUAL blue screen.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.FileTypeBuffered">
 <summary>
 Image file accessed using queued I/O requests to image file opened in buffered mode. Useful for example when
 mounting image file with smaller sector size than image file storage.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.Modified">
 <summary>
 This flag can only be set by the driver and may be included in the response Flags field from QueryDevice method.
 It indicates that virtual disk contents have changed since created or since flag was last cleared. This flag can be
 cleared by specifying it in FlagsToChange parameter and not in Flags parameter in a call to ChangeFlags method.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.FakeDiskSignatureIfZero">
 <summary>
 If this flag is set, the driver will report a random fake disk signature to Windows in case device is read-only,
 existing disk signature is zero and master boot record has otherwise apparently valid data.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.SharedImage">
 <summary>
 Open image in shared mode.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.DeviceFlags.WriteOverlay">
 <summary>
 Use differencing image file as write overlay. This is only valid together with read-only flag and file or proxy
 types and when a write overlay image file is specified when the virtual disk is created. It also needs the write
 filter driver to be installed and registered.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.IO.BufferedBinaryWriter">
 <summary>
 Buffered version of the BinaryWriter class. Writes to a MemoryStream internally and flushes
 writes out contents of MemoryStream when WriteTo() or ToArray() are called.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.BufferedBinaryWriter.#ctor(System.Text.Encoding)">
 <summary>
 Creates a new instance of BufferedBinaryWriter.
 </summary>
 <param name="encoding">Specifies which text encoding to use.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.BufferedBinaryWriter.#ctor">
 <summary>
 Creates a new instance of BufferedBinaryWriter using System.Text.Encoding.Unicode text encoding.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.BufferedBinaryWriter.WriteTo(System.IO.Stream)">
 <summary>
 Writes current contents of internal MemoryStream to another stream and resets
 this BufferedBinaryWriter to empty state.
 </summary>
 <param name="stream"></param>
</member>
<member name="M:Arsenal.ImageMounter.IO.BufferedBinaryWriter.ToArray">
 <summary>
 Extracts current contents of internal MemoryStream to a new byte array and resets
 this BufferedBinaryWriter to empty state.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.BufferedBinaryWriter.Clear">
 <summary>
 Clears contents of internal MemoryStream.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.IO.CachedIniFile">
 <summary>
 Class that caches a text INI file
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.Flush">
 <summary>
 Flushes registry mapping for all INI files.
 is thrown.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.SaveValue(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})">
 <summary>
 Saves a value to an INI file by calling Win32 API function WritePrivateProfileString. If call fails and exception
 is thrown.
 </summary>
 <param name="FileName">Name and path of INI file where to save value</param>
 <param name="SectionName">Name of INI file section where to save value</param>
 <param name="SettingName">Name of value to save</param>
 <param name="Value">Value to save</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.SaveValue(System.String,System.String,System.String,System.String)">
 <summary>
 Saves a value to an INI file by calling Win32 API function WritePrivateProfileString. If call fails and exception
 is thrown.
 </summary>
 <param name="FileName">Name and path of INI file where to save value</param>
 <param name="SectionName">Name of INI file section where to save value</param>
 <param name="SettingName">Name of value to save</param>
 <param name="Value">Value to save</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.SaveValue(System.ReadOnlyMemory{System.Char},System.String,System.String)">
 <summary>
 Saves a current value from this object to an INI file by calling Win32 API function WritePrivateProfileString.
 If call fails and exception is thrown.
 </summary>
 <param name="FileName">Name and path of INI file where to save value</param>
 <param name="SectionName">Name of INI file section where to save value</param>
 <param name="SettingName">Name of value to save</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.SaveValue(System.String,System.String)">
 <summary>
 Saves a current value from this object to INI file that this object last loaded values from, either through constructor
 call with filename parameter or by calling Load method with filename parameter.
 Operation is carried out by calling Win32 API function WritePrivateProfileString.
 If call fails and exception is thrown.
 </summary>
 <param name="SectionName">Name of INI file section where to save value</param>
 <param name="SettingName">Name of value to save</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.Save">
 <summary>
 Saves current contents of this object to INI file that this object last loaded values from, either through constructor
 call with filename parameter or by calling Load method with filename parameter.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.Save(System.String,System.Text.Encoding)">
 <summary>
 Saves current contents of this object to an INI file. If the file already exists, it is overwritten.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.Save(System.String)">
 <summary>
 Saves current contents of this object to an INI file. If the file already exists, it is overwritten.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.IO.CachedIniFile.Filename">
 <summary>
 Name of last INI file loaded into this object.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.IO.CachedIniFile.Encoding">
 <summary>
 Text encoding of last INI file loaded into this object.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.#ctor">
 <summary>
 Creates a new empty CachedIniFile object
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.#ctor(System.String,System.Text.Encoding)">
 <summary>
 Creates a new CachedIniFile object and fills it with the contents of the specified
 INI file
 </summary>
 <param name="Filename">Name of INI file to read into the created object</param>
 <param name="Encoding">Text encoding used in INI file</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.#ctor(System.String)">
 <summary>
 Creates a new CachedIniFile object and fills it with the contents of the specified
 INI file
 </summary>
 <param name="Filename">Name of INI file to read into the created object</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.#ctor(System.IO.Stream,System.Text.Encoding)">
 <summary>
 Creates a new CachedIniFile object and fills it with the contents of the specified
 INI file
 </summary>
 <param name="Stream">Stream that contains INI settings to read into the created object</param>
 <param name="Encoding">Text encoding used in INI file</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.#ctor(System.IO.Stream)">
 <summary>
 Creates a new CachedIniFile object and fills it with the contents of the specified
 INI file
 </summary>
 <param name="Stream">Stream that contains INI settings to read into the created object</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.Reload">
 <summary>
 Reloads settings from disk file. This is only supported if this object was created using
 a constructor that takes a filename or if a Load() method that takes a filename has been
 called earlier.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.Load(System.String)">
 <summary>
 Loads settings from an INI file into this CachedIniFile object. Existing settings
 in object is replaced.
 </summary>
 <param name="Filename">INI file to load</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.Load(System.String,System.Text.Encoding)">
 <summary>
 Loads settings from an INI file into this CachedIniFile object. Existing settings
 in object is replaced.
 </summary>
 <param name="Filename">INI file to load</param>
 <param name="Encoding">Text encoding for INI file</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.Load(System.IO.Stream,System.Text.Encoding)">
 <summary>
 Loads settings from an INI file into this CachedIniFile object. Existing settings
 in object is replaced.
 </summary>
 <param name="Stream">Stream containing INI file data</param>
 <param name="Encoding">Text encoding for INI stream</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.Load(System.IO.Stream)">
 <summary>
 Loads settings from an INI file into this CachedIniFile object using Default text
 encoding. Existing settings in object is replaced.
 </summary>
 <param name="Stream">Stream containing INI file data</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.CachedIniFile.Load(System.IO.TextReader)">
 <summary>
 Loads settings from an INI file into this CachedIniFile object. Existing settings
 in object is replaced.
 </summary>
 <param name="Stream">Stream containing INI file data</param>
</member>
<member name="T:Arsenal.ImageMounter.IO.DisposableDictionary`2">
 <summary>
 A System.Collections.Generic.Dictionary(Of TKey, TValue) extended with IDisposable implementation that disposes each
 value object in the dictionary when the dictionary is disposed.
 </summary>
 <typeparam name="TKey"></typeparam>
 <typeparam name="TValue"></typeparam>
</member>
<member name="T:Arsenal.ImageMounter.IO.DisposableList">
 <summary>
 A System.Collections.Generic.List(Of T) extended with IDisposable implementation that disposes each
 object in the list when the list is disposed.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.IO.DisposableList`1">
 <summary>
 A System.Collections.Generic.List(Of T) extended with IDisposable implementation that disposes each
 object in the list when the list is disposed.
 </summary>
 <typeparam name="T">Type of elements in list. Type needs to implement IDisposable interface.</typeparam>
</member>
<member name="T:Arsenal.ImageMounter.IO.NativeFileIO">
 <summary>
 Provides wrappers for Win32 file API. This makes it possible to open everything that
 CreateFile() can open and get a FileStream based .NET wrapper around the file handle.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.IO.NativeFileIO.PhDiskMntCtl">
 <summary>
 Control methods for direct communication with SCSI miniport.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.IO.NativeFileIO.PhDiskMntCtl.SrbIoCtlSignature">
 <summary>
 Signature to set in SRB_IO_CONTROL header. This identifies that sender and receiver of
 IOCTL_SCSI_MINIPORT requests talk to intended components only.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.PhDiskMntCtl.SendSrbIoControl(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32,System.Byte[],System.Int32@)">
 <summary>
 Sends an IOCTL_SCSI_MINIPORT control request to a SCSI miniport.
 </summary>
 <param name="adapter">Open handle to SCSI adapter.</param>
 <param name="ctrlcode">Control code to set in SRB_IO_CONTROL header.</param>
 <param name="timeout">Timeout to set in SRB_IO_CONTROL header.</param>
 <param name="databytes">Optional request data after SRB_IO_CONTROL header. The Length field in
 SRB_IO_CONTROL header will be automatically adjusted to reflect the amount of data passed by this function.</param>
 <param name="returncode">ReturnCode value from SRB_IO_CONTROL header upon return.</param>
 <returns>This method returns a BinaryReader object that can be used to read and parse data returned after the
 SRB_IO_CONTROL header.</returns>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.Win32Try(System.Boolean)">
 <summary>
 Encapsulates call to a Win32 API function that returns a BOOL value indicating success
 or failure and where an error value is available through a call to GetLastError() in case
 of failure. If value True is passed to this method it does nothing. If False is passed,
 it calls GetLastError(), converts error code to a HRESULT value and throws a managed
 exception for that HRESULT.
 </summary>
 <param name="result">Return code from a Win32 API function call.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.Win32Try``1(``0)">
 <summary>
 Encapsulates call to a Win32 API function that returns a value where failure
 is indicated as a NULL return and GetLastError() returns an error code. If
 non-zero value is passed to this method it just returns that value. If zero
 value is passed, it calls GetLastError() and throws a managed exception for
 that error code.
 </summary>
 <param name="result">Return code from a Win32 API function call.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.NtDllTry(System.Int32)">
 <summary>
 Encapsulates call to an ntdll.dll API function that returns an NTSTATUS value indicating
 success or error status. If result is zero or positive, this function just passes through
 that value as return value. If result is negative indicating an error, it converts error
 code to a Win32 error code and throws a managed exception for that error code.
 </summary>
 <param name="result">Return code from a ntdll.dll API function call.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.GetSystemHandleTable">
 <summary>
 Returns current system handle table.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.IO.NativeFileIO.SystemUptime">
 <summary>
 System uptime
 </summary>
 <returns>Time elapsed since system startup</returns>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.EnumerateHandleTableHandleInformation(System.String)">
 <summary>
 Enumerates open handles in the system.
 </summary>
 <param name="filterObjectType">Name of object types to return in the enumeration. Normally set to for example "File" to return file handles or "Key" to return registry key handles</param>
 <returns>Enumeration with information about each handle table entry</returns>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.DeviceIoControl(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.Memory{System.Byte},System.UInt32@)">
 <summary>
 Sends an IOCTL control request to a device driver, or an FSCTL control request to a filesystem driver.
 </summary>
 <param name="device">Open handle to filer or device.</param>
 <param name="ctrlcode">IOCTL or FSCTL control code.</param>
 <param name="data">Optional function to create input data for the control function.</param>
 <param name="outdatasize">Number of bytes returned in output buffer by driver.</param>
 <returns>This method returns a byte array that can be used to read and parse data returned by
 driver in the output buffer.</returns>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.CreateFile(System.ReadOnlyMemory{System.Char},System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.IntPtr,System.UInt32,System.Int32,System.IntPtr)">
 <summary>
 Calls Win32 API CreateFile() function and encapsulates returned handle in a SafeFileHandle object.
 </summary>
 <param name="FileName">Name of file to open.</param>
 <param name="DesiredAccess">File access to request.</param>
 <param name="ShareMode">Share mode to request.</param>
 <param name="CreationDisposition">Open/creation mode.</param>
 <param name="SecurityAttributes"></param>
 <param name="FlagsAndAttributes"></param>
 <param name="TemplateFile"></param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.OpenFileHandle(System.ReadOnlyMemory{System.Char},System.IO.FileAccess,System.IO.FileShare,System.IO.FileMode,System.Boolean)">
 <summary>
 Calls Win32 API CreateFile() function and encapsulates returned handle in a SafeFileHandle object.
 </summary>
 <param name="FileName">Name of file to open.</param>
 <param name="DesiredAccess">File access to request.</param>
 <param name="ShareMode">Share mode to request.</param>
 <param name="CreationDisposition">Open/creation mode.</param>
 <param name="Overlapped">Specifies whether to request overlapped I/O.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.OpenFileHandle(System.ReadOnlyMemory{System.Char},System.IO.FileAccess,System.IO.FileShare,System.IO.FileMode,System.IO.FileOptions)">
 <summary>
 Calls Win32 API CreateFile() function and encapsulates returned handle in a SafeFileHandle object.
 </summary>
 <param name="FileName">Name of file to open.</param>
 <param name="DesiredAccess">File access to request.</param>
 <param name="ShareMode">Share mode to request.</param>
 <param name="CreationDisposition">Open/creation mode.</param>
 <param name="Options">Specifies whether to request overlapped I/O.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.OpenFileHandle(System.ReadOnlyMemory{System.Char},System.IO.FileAccess,System.IO.FileShare,System.IO.FileMode,System.UInt32)">
 <summary>
 Calls Win32 API CreateFile() function and encapsulates returned handle in a SafeFileHandle object.
 </summary>
 <param name="FileName">Name of file to open.</param>
 <param name="DesiredAccess">File access to request.</param>
 <param name="ShareMode">Share mode to request.</param>
 <param name="CreationDisposition">Open/creation mode.</param>
 <param name="Options">Specifies whether to request overlapped I/O.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.NtCreateFile(System.String,Arsenal.ImageMounter.IO.NtObjectAttributes,System.IO.FileAccess,System.IO.FileShare,Arsenal.ImageMounter.IO.NtCreateDisposition,Arsenal.ImageMounter.IO.NtCreateOptions,System.IO.FileAttributes,Microsoft.Win32.SafeHandles.SafeFileHandle,Arsenal.ImageMounter.IO.NtFileCreated@)">
 <summary>
 Calls NT API NtCreateFile() function and encapsulates returned handle in a SafeFileHandle object.
 </summary>
 <param name="FileName">Name of file to open.</param>
 <param name="DesiredAccess">File access to request.</param>
 <param name="ShareMode">Share mode to request.</param>
 <param name="CreationOption">Specifies whether to request overlapped I/O.</param>
 <param name="CreationDisposition">Open/creation mode.</param>
 <param name="FileAttributes">Attributes for created file.</param>
 <param name="ObjectAttributes">Object attributes.</param>
 <param name="RootDirectory">Root directory to start path parsing from, or null for rooted path.</param>
 <param name="WasCreated">Return information about whether a file was created, existing file opened etc.</param>
 <returns>NTSTATUS value indicating result of the operation.</returns>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.NtOpenEvent(System.String,Arsenal.ImageMounter.IO.NtObjectAttributes,System.UInt32,Microsoft.Win32.SafeHandles.SafeFileHandle)">
 <summary>
 Calls NT API NtOpenEvent() function to open an event object using NT path and encapsulates returned handle in a SafeWaitHandle object.
 </summary>
 <param name="EventName">Name of event to open.</param>
 <param name="DesiredAccess">Access to request.</param>
 <param name="ObjectAttributes">Object attributes.</param>
 <param name="RootDirectory">Root directory to start path parsing from, or null for rooted path.</param>
 <returns>NTSTATUS value indicating result of the operation.</returns>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.OpenBackupHandle(System.ReadOnlyMemory{System.Char},System.IO.FileAccess,System.IO.FileShare,System.IO.FileMode)">
 <summary>
 Calls Win32 API CreateFile() function to create a backup handle for a file or
 directory and encapsulates returned handle in a SafeFileHandle object. This
 handle can later be used in calls to Win32 Backup API functions or similar.
 </summary>
 <param name="FilePath">Name of file or directory to open.</param>
 <param name="DesiredAccess">Access to request.</param>
 <param name="ShareMode">Share mode to request.</param>
 <param name="CreationDisposition">Open/creation mode.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.TryOpenBackupHandle(System.ReadOnlyMemory{System.Char},System.IO.FileAccess,System.IO.FileShare,System.IO.FileMode)">
 <summary>
 Calls Win32 API CreateFile() function to create a backup handle for a file or
 directory and encapsulates returned handle in a SafeFileHandle object. This
 handle can later be used in calls to Win32 Backup API functions or similar.
 </summary>
 <param name="FilePath">Name of file or directory to open.</param>
 <param name="DesiredAccess">Access to request.</param>
 <param name="ShareMode">Share mode to request.</param>
 <param name="CreationDisposition">Open/creation mode.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.GetFileStreamLegalAccessValue(System.IO.FileAccess)">
 <summary>
 Converts FileAccess flags to values legal in constructor call to FileStream class.
 </summary>
 <param name="Value">FileAccess values.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.OpenFileStream(System.ReadOnlyMemory{System.Char},System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
 <summary>
 Calls Win32 API CreateFile() function and encapsulates returned handle.
 </summary>
 <param name="FileName">Name of file to open.</param>
 <param name="DesiredAccess">File access to request.</param>
 <param name="ShareMode">Share mode to request.</param>
 <param name="CreationDisposition">Open/creation mode.</param>
 <param name="BufferSize">Buffer size to specify in constructor call to FileStream class.</param>
 <param name="Overlapped">Specifies whether to request overlapped I/O.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.OpenFileStream(System.ReadOnlyMemory{System.Char},System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Boolean)">
 <summary>
 Calls Win32 API CreateFile() function and encapsulates returned handle.
 </summary>
 <param name="FileName">Name of file to open.</param>
 <param name="DesiredAccess">File access to request.</param>
 <param name="ShareMode">Share mode to request.</param>
 <param name="CreationDisposition">Open/creation mode.</param>
 <param name="Overlapped">Specifies whether to request overlapped I/O.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.OpenFileStream(System.ReadOnlyMemory{System.Char},System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.FileOptions)">
 <summary>
 Calls Win32 API CreateFile() function and encapsulates returned handle.
 </summary>
 <param name="FileName">Name of file to open.</param>
 <param name="DesiredAccess">File access to request.</param>
 <param name="ShareMode">Share mode to request.</param>
 <param name="CreationDisposition">Open/creation mode.</param>
 <param name="Options">Specifies whether to request overlapped I/O.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.AddProcessPaths(System.Boolean,System.String)">
 <summary>
 Adds a semicolon separated list of paths to the PATH environment variable of
 current process. Any paths already in present PATH variable are not added again.
 </summary>
 <param name="AddPaths">Semicolon separated list of directory paths</param>
 <param name="BeforeExisting">Indicates whether to insert new paths before existing path list or move
 existing of specified paths first if True, or add new paths after existing path list if False.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.AddProcessPaths(System.Boolean,System.String[])">
 <summary>
 Adds a list of paths to the PATH environment variable of current process. Any
 paths already in present PATH variable are not added again.
 </summary>
 <param name="AddPathsArray">Array of directory paths</param>
 <param name="BeforeExisting">Indicates whether to insert new paths before existing path list or move
 existing of specified paths first if True, or add new paths after existing path list if False.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.DismountVolumeFilesystem(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Boolean)">
 <summary>
 Locks and dismounts filesystem on a volume. Upon successful return, further access to the device
 can only be done through the handle passed to this function until handle is closed or lock is
 released.
 </summary>
 <param name="Device">Handle to device to lock and dismount.</param>
 <param name="Force">Indicates if True that volume should be immediately dismounted even if it
 cannot be locked. This causes all open handles to files on the volume to become invalid. If False,
 successful lock (no other open handles) is required before attempting to dismount filesystem.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.DismountVolumeFilesystemAsync(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Boolean,System.Threading.CancellationToken)">
 <summary>
 Locks and dismounts filesystem on a volume. Upon successful return, further access to the device
 can only be done through the handle passed to this function until handle is closed or lock is
 released.
 </summary>
 <param name="Device">Handle to device to lock and dismount.</param>
 <param name="Force">Indicates if True that volume should be immediately dismounted even if it
 cannot be locked. This causes all open handles to files on the volume to become invalid. If False,
 successful lock (no other open handles) is required before attempting to dismount filesystem.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.GetDiskGeometry(Microsoft.Win32.SafeHandles.SafeFileHandle)">
 <summary>
 Retrieves disk geometry.
 </summary>
 <param name="hDevice">Handle to device.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.GetScsiAddress(Microsoft.Win32.SafeHandles.SafeFileHandle)">
 <summary>
 Retrieves SCSI address.
 </summary>
 <param name="hDevice">Handle to device.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.GetScsiAddress(System.ReadOnlyMemory{System.Char})">
 <summary>
 Retrieves SCSI address.
 </summary>
 <param name="Device">Path to device.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.GetScsiAddressForNtDevice(System.String)">
 <summary>
 Retrieves status of write overlay for mounted device.
 </summary>
 <param name="NtDevicePath">Path to device.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.GetStorageStandardProperties(Microsoft.Win32.SafeHandles.SafeFileHandle)">
 <summary>
 Retrieves storage standard properties.
 </summary>
 <param name="hDevice">Handle to device.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.GetStorageTrimProperties(Microsoft.Win32.SafeHandles.SafeFileHandle)">
 <summary>
 Retrieves storage TRIM properties.
 </summary>
 <param name="hDevice">Handle to device.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.GetStorageDeviceNumber(Microsoft.Win32.SafeHandles.SafeFileHandle)">
 <summary>
 Retrieves storage device number.
 </summary>
 <param name="hDevice">Handle to device.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.GetPhysicalDriveNameForNtDevice(System.String)">
 <summary>
 Retrieves PhysicalDrive or CdRom path for NT raw device path
 </summary>
 <param name="ntdevice">NT device path, such as \Device\00000001.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.QueryDirectoryJunction(System.ReadOnlyMemory{System.Char})">
 <summary>
 Returns directory junction target path
 </summary>
 <param name="source">Location of directory that is a junction.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.CreateDirectoryJunction(System.String,System.ReadOnlyMemory{System.Char})">
 <summary>
 Creates a directory junction
 </summary>
 <param name="source">Location of directory to convert to a junction.</param>
 <param name="target">Target path for the junction.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.QueryDirectoryJunction(Microsoft.Win32.SafeHandles.SafeFileHandle)">
 <summary>
 Get directory junction target path
 </summary>
 <param name="source">Handle to directory.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.CreateDirectoryJunction(Microsoft.Win32.SafeHandles.SafeFileHandle,System.ReadOnlyMemory{System.Char})">
 <summary>
 Creates a directory junction
 </summary>
 <param name="source">Handle to directory.</param>
 <param name="target">Target path for the junction.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.UpdateDiskProperties">
 <summary>
 Re-enumerates partitions on all disk drives currently connected to the system. No exceptions are
 thrown on error, but any exceptions from underlying API calls are logged to trace log.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.UpdateDiskProperties(Arsenal.ImageMounter.IO.SCSI_ADDRESS)">
 <summary>
 Re-enumerates partitions on a disk device with a specified SCSI address. No
 exceptions are thrown on error, but any exceptions from underlying API calls are
 logged to trace log.
 </summary>
 <returns>Returns a value indicating whether operation was successful or not.</returns>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.UpdateDiskProperties(System.ReadOnlyMemory{System.Char})">
 <summary>
 Re-enumerates partitions on a disk device with a specified device path. No
 exceptions are thrown on error, but any exceptions from underlying API calls are
 logged to trace log.
 </summary>
 <returns>Returns a value indicating whether operation was successful or not.</returns>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.OpenDiskByScsiAddress(Arsenal.ImageMounter.IO.SCSI_ADDRESS,System.IO.FileAccess)">
 <summary>
 Opens a disk device with a specified SCSI address and returns both name and an open handle.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.GetDeviceNameByScsiAddressAndSize(Arsenal.ImageMounter.IO.SCSI_ADDRESS,System.Int64)">
 <summary>
 Returns a disk device object name for a specified SCSI address.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.IO.NativeFileIO.SafeServiceHandle">
 <summary>
 Encapsulates a Service Control Management object handle that is closed by calling CloseServiceHandle() Win32 API.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.SafeServiceHandle.#ctor(System.IntPtr,System.Boolean)">
 <summary>
 Initiates a new instance with an existing open handle.
 </summary>
 <param name="open_handle">Existing open handle.</param>
 <param name="owns_handle">Indicates whether handle should be closed when this
 instance is released.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.SafeServiceHandle.#ctor">
 <summary>
 Creates a new empty instance. This constructor is used by native to managed
 handle marshaller.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.SafeServiceHandle.ReleaseHandle">
 <summary>
 Closes contained handle by calling CloseServiceHandle() Win32 API.
 </summary>
 <returns>Return value from CloseServiceHandle() Win32 API.</returns>
</member>
<member name="T:Arsenal.ImageMounter.IO.NativeFileIO.SafeFindVolumeHandle">
 <summary>
 Encapsulates a FindVolume handle that is closed by calling FindVolumeClose() Win32 API.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.SafeFindVolumeHandle.#ctor(System.IntPtr,System.Boolean)">
 <summary>
 Initiates a new instance with an existing open handle.
 </summary>
 <param name="open_handle">Existing open handle.</param>
 <param name="owns_handle">Indicates whether handle should be closed when this
 instance is released.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.SafeFindVolumeHandle.#ctor">
 <summary>
 Creates a new empty instance. This constructor is used by native to managed
 handle marshaller.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.SafeFindVolumeHandle.ReleaseHandle">
 <summary>
 Closes contained handle by calling CloseServiceHandle() Win32 API.
 </summary>
 <returns>Return value from CloseServiceHandle() Win32 API.</returns>
</member>
<member name="T:Arsenal.ImageMounter.IO.NativeFileIO.SafeFindVolumeMountPointHandle">
 <summary>
 Encapsulates a FindVolumeMountPoint handle that is closed by calling FindVolumeMountPointClose () Win32 API.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.SafeFindVolumeMountPointHandle.#ctor(System.IntPtr,System.Boolean)">
 <summary>
 Initiates a new instance with an existing open handle.
 </summary>
 <param name="open_handle">Existing open handle.</param>
 <param name="owns_handle">Indicates whether handle should be closed when this
 instance is released.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.SafeFindVolumeMountPointHandle.#ctor">
 <summary>
 Creates a new empty instance. This constructor is used by native to managed
 handle marshaller.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.SafeFindVolumeMountPointHandle.ReleaseHandle">
 <summary>
 Closes contained handle by calling CloseServiceHandle() Win32 API.
 </summary>
 <returns>Return value from CloseServiceHandle() Win32 API.</returns>
</member>
<member name="T:Arsenal.ImageMounter.IO.NativeFileIO.SafeInfHandle">
 <summary>
 Encapsulates a SetupAPI hInf handle that is closed by calling SetupCloseInf() API.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.SafeInfHandle.#ctor(System.IntPtr,System.Boolean)">
 <summary>
 Initiates a new instance with an existing open handle.
 </summary>
 <param name="open_handle">Existing open handle.</param>
 <param name="owns_handle">Indicates whether handle should be closed when this
 instance is released.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.SafeInfHandle.#ctor">
 <summary>
 Creates a new empty instance. This constructor is used by native to managed
 handle marshaller.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.SafeInfHandle.ReleaseHandle">
 <summary>
 Closes contained handle by calling CloseServiceHandle() Win32 API.
 </summary>
 <returns>Return value from CloseServiceHandle() Win32 API.</returns>
</member>
<member name="T:Arsenal.ImageMounter.IO.NativeFileIO.SafeDeviceInfoSetHandle">
 <summary>
 Encapsulates a SetupAPI hInf handle that is closed by calling SetupCloseInf() API.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.SafeDeviceInfoSetHandle.#ctor(System.IntPtr,System.Boolean)">
 <summary>
 Initiates a new instance with an existing open handle.
 </summary>
 <param name="open_handle">Existing open handle.</param>
 <param name="owns_handle">Indicates whether handle should be closed when this
 instance is released.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.SafeDeviceInfoSetHandle.#ctor">
 <summary>
 Creates a new empty instance. This constructor is used by native to managed
 handle marshaller.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeFileIO.SafeDeviceInfoSetHandle.ReleaseHandle">
 <summary>
 Closes contained handle by calling CloseServiceHandle() Win32 API.
 </summary>
 <returns>Return value from CloseServiceHandle() Win32 API.</returns>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeStruct.GetOffsetByFileExt(System.String)">
 <summary>
 Checks if filename contains a known extension for which PhDskMnt knows of a constant offset value. That value can be
 later passed as Offset parameter to CreateDevice method.
 </summary>
 <param name="ImageFile">Name of disk image file.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeStruct.GetSectorSizeFromFileName(System.String)">
 <summary>
 Returns sector size typically used for image file name extensions. Returns 2048 for
 .iso, .nrg and .bin. Returns 512 for all other file name extensions.
 </summary>
 <param name="ImageFile">Name of disk image file.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeStruct.IsReadOnly(Arsenal.ImageMounter.DeviceFlags)">
 <summary>
 Checks if Flags specifies a read only virtual disk.
 </summary>
 <param name="Flags">Flag field to check.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeStruct.IsRemovable(Arsenal.ImageMounter.DeviceFlags)">
 <summary>
 Checks if Flags specifies a removable virtual disk.
 </summary>
 <param name="Flags">Flag field to check.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeStruct.IsModified(Arsenal.ImageMounter.DeviceFlags)">
 <summary>
 Checks if Flags specifies a modified virtual disk.
 </summary>
 <param name="Flags">Flag field to check.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeStruct.GetDeviceType(Arsenal.ImageMounter.DeviceFlags)">
 <summary>
 Gets device type bits from a Flag field.
 </summary>
 <param name="Flags">Flag field to check.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeStruct.GetDiskType(Arsenal.ImageMounter.DeviceFlags)">
 <summary>
 Gets disk type bits from a Flag field.
 </summary>
 <param name="Flags">Flag field to check.</param>
</member>
<member name="M:Arsenal.ImageMounter.IO.NativeStruct.GetProxyType(Arsenal.ImageMounter.DeviceFlags)">
 <summary>
 Gets proxy type bits from a Flag field.
 </summary>
 <param name="Flags">Flag field to check.</param>
</member>
<member name="T:Arsenal.ImageMounter.IO.NullSafeDictionary`2">
 <summary>
 An extension to Dictionary(Of TKey, TValue) that returns a
 default item for non-existing keys
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NullSafeDictionary`2.GetDefaultValue(`0)">
 <summary>Gets a value that is returned as item for non-existing
 keys in dictionary</summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NullSafeDictionary`2.#ctor">
 <summary>
 Creates a new NullSafeDictionary object
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.NullSafeDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
 <summary>
 Creates a new NullSafeDictionary object
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.IO.NullSafeDictionary`2.Item(`0)">
 <summary>
 Gets or sets the item for a key in dictionary. If no item exists for key, the default
 value for this SafeDictionary is returned
 </summary>
 <param name="key"></param>
</member>
<member name="T:Arsenal.ImageMounter.IO.SystemNotificationEvent">
 <summary>
 Represents a system notification event object. Well known paths are available as constants of SystemNotificationEvent class.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.IO.SystemNotificationEvent.#ctor(System.String)">
 <summary>
 Opens a system notification event object. Well known paths are available as constants of SystemNotificationEvent class.
 </summary>
 <param name="EventName">NT name and path to event to open</param>
</member>
<member name="M:Arsenal.ImageMounter.Reflection.MembersStringSetter.MembersStringSetter`1.GenerateReferenceTypeMemberSetter(System.String)">
 <summary>Generate a specific member setter for a specific reference type</summary>
 <param name="member_name">The member's name as defined in <typeparamref name="T"/></param>
 <returns>A compiled lambda which can access (set> the member</returns>
</member>
<member name="T:Arsenal.ImageMounter.ScsiAdapter">
 <summary>
 Represents Arsenal Image Mounter objects.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.OpenAdapter">
 <summary>
 Retrieves a handle to first found adapter, or null if error occurs.
 </summary>
 <remarks>Arsenal Image Mounter does not currently support more than one adapter.</remarks>
 <returns>An object containing devinst value and an open handle to first found
 compatible adapter.</returns>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.#ctor">
 <summary>
 Opens first found Arsenal Image Mounter adapter.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.#ctor(System.Byte)">
 <summary>
 Opens a specific Arsenal Image Mounter adapter specified by SCSI port number.
 </summary>
 <param name="ScsiPortNumber">Scsi adapter port number as assigned by SCSI class driver.</param>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.GetDeviceList">
 <summary>
 Retrieves a list of virtual disks on this adapter. Each element in returned list holds device number of an existing
 virtual disk.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.EnumerateDevicesProperties">
 <summary>
 Retrieves a list of DeviceProperties objects for each virtual disk on this adapter.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.CreateDevice(System.Int64,System.UInt32,System.Int64,Arsenal.ImageMounter.DeviceFlags,System.ReadOnlyMemory{System.Char},System.Boolean,System.UInt32@)">
 <summary>
 Creates a new virtual disk.
 </summary>
 <param name="DiskSize">Size of virtual disk. If this parameter is zero, current size of disk image file will
 automatically be used as virtual disk size.</param>
 <param name="BytesPerSector">Number of bytes per sector for virtual disk geometry. This parameter can be zero
  in which case most reasonable value will be automatically used by the driver.</param>
 <param name="ImageOffset">A skip offset if virtual disk data does not begin immediately at start of disk image file.
 Frequently used with image formats like Nero NRG which start with a file header not used by Arsenal Image Mounter
 or Windows filesystem drivers.</param>
 <param name="Flags">Flags specifying properties for virtual disk. See comments for each flag value.</param>
 <param name="Filename">Name of disk image file to use or create. If disk image file already exists, the DiskSize
 parameter can be zero in which case current disk image file size will be used as virtual disk size. If Filename
 parameter is Nothing/null disk will be created in virtual memory and not backed by a physical disk image file.</param>
 <param name="NativePath">Specifies whether Filename parameter specifies a path in Windows native path format, the
 path format used by drivers in Windows NT kernels, for example \Device\Harddisk0\Partition1\imagefile.img. If this
 parameter is False path in FIlename parameter will be interpreted as an ordinary user application path.</param>
 <param name="DeviceNumber">In: Device number for device to create. Device number must not be in use by an existing
 virtual disk. For automatic allocation of device number, pass ScsiAdapter.AutoDeviceNumber.

 Out: Device number for created device.</param>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.CreateDevice(System.Int64,System.UInt32,System.Int64,Arsenal.ImageMounter.DeviceFlags,System.ReadOnlyMemory{System.Char},System.Boolean,System.ReadOnlyMemory{System.Char},System.Boolean,System.UInt32@)">
 <summary>
 Creates a new virtual disk.
 </summary>
 <param name="DiskSize">Size of virtual disk. If this parameter is zero, current size of disk image file will
 automatically be used as virtual disk size.</param>
 <param name="BytesPerSector">Number of bytes per sector for virtual disk geometry. This parameter can be zero
  in which case most reasonable value will be automatically used by the driver.</param>
 <param name="ImageOffset">A skip offset if virtual disk data does not begin immediately at start of disk image file.
 Frequently used with image formats like Nero NRG which start with a file header not used by Arsenal Image Mounter
 or Windows filesystem drivers.</param>
 <param name="Flags">Flags specifying properties for virtual disk. See comments for each flag value.</param>
 <param name="Filename">Name of disk image file to use or create. If disk image file already exists, the DiskSize
 parameter can be zero in which case current disk image file size will be used as virtual disk size. If Filename
 parameter is Nothing/null disk will be created in virtual memory and not backed by a physical disk image file.</param>
 <param name="NativePath">Specifies whether Filename parameter specifies a path in Windows native path format, the
 path format used by drivers in Windows NT kernels, for example \Device\Harddisk0\Partition1\imagefile.img. If this
 parameter is False path in Filename parameter will be interpreted as an ordinary user application path.</param>
 <param name="WriteOverlayFilename">Name of differencing image file to use for write overlay operation. Flags fields
 must also specify read-only device and write overlay operation for this field to be used.</param>
 <param name="WriteOverlayNativePath">Specifies whether WriteOverlayFilename parameter specifies a path in Windows
 native path format, the path format used by drivers in Windows NT kernels, for example
 \Device\Harddisk0\Partition1\imagefile.img. If this parameter is False path in Filename parameter will be interpreted
 as an ordinary user application path.</param>
 <param name="DeviceNumber">In: Device number for device to create. Device number must not be in use by an existing
 virtual disk. For automatic allocation of device number, pass ScsiAdapter.AutoDeviceNumber.

 Out: Device number for created device.</param>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.RemoveDeviceSafe(System.UInt32)">
 <summary>
 Removes an existing virtual disk from adapter by first taking the disk offline so that any
 mounted file systems are safely dismounted.
 </summary>
 <param name="DeviceNumber">Device number to remove. Note that AutoDeviceNumber constant passed
 in this parameter causes all present virtual disks to be removed from this adapter.</param>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.RemoveAllDevicesSafe">
 <summary>
 Removes all virtual disks on current adapter by first taking the disks offline so that any
 mounted file systems are safely dismounted.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.RemoveDevice(System.UInt32)">
 <summary>
 Removes an existing virtual disk from adapter.
 </summary>
 <param name="DeviceNumber">Device number to remove. Note that AutoDeviceNumber constant passed
 in this parameter causes all present virtual disks to be removed from this adapter.</param>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.RemoveAllDevices">
 <summary>
 Removes all virtual disks on current adapter.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.QueryDevice(System.UInt32,System.Int64@,System.UInt32@,System.Int64@,Arsenal.ImageMounter.DeviceFlags@,System.String@)">
 <summary>
 Retrieves properties for an existing virtual disk.
 </summary>
 <param name="DeviceNumber">Device number of virtual disk to retrieve properties for.</param>
 <param name="DiskSize">Size of virtual disk.</param>
 <param name="BytesPerSector">Number of bytes per sector for virtual disk geometry.</param>
 <param name="ImageOffset">A skip offset if virtual disk data does not begin immediately at start of disk image file.
 Frequently used with image formats like Nero NRG which start with a file header not used by Arsenal Image Mounter
 or Windows filesystem drivers.</param>
 <param name="Flags">Flags specifying properties for virtual disk. See comments for each flag value.</param>
 <param name="Filename">Name of disk image file holding storage for file type virtual disk or used to create a
 virtual memory type virtual disk.</param>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.QueryDevice(System.UInt32,System.Int64@,System.UInt32@,System.Int64@,Arsenal.ImageMounter.DeviceFlags@,System.String@,System.String@)">
 <summary>
 Retrieves properties for an existing virtual disk.
 </summary>
 <param name="DeviceNumber">Device number of virtual disk to retrieve properties for.</param>
 <param name="DiskSize">Size of virtual disk.</param>
 <param name="BytesPerSector">Number of bytes per sector for virtual disk geometry.</param>
 <param name="ImageOffset">A skip offset if virtual disk data does not begin immediately at start of disk image file.
 Frequently used with image formats like Nero NRG which start with a file header not used by Arsenal Image Mounter
 or Windows filesystem drivers.</param>
 <param name="Flags">Flags specifying properties for virtual disk. See comments for each flag value.</param>
 <param name="Filename">Name of disk image file holding storage for file type virtual disk or used to create a
 virtual memory type virtual disk.</param>
 <param name="WriteOverlayImagefile">Path to differencing file used in write-temporary mode.</param>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.QueryDevice(System.UInt32)">
 <summary>
 Retrieves properties for an existing virtual disk.
 </summary>
 <param name="DeviceNumber">Device number of virtual disk to retrieve properties for.</param>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.ChangeFlags(System.UInt32,Arsenal.ImageMounter.DeviceFlags,Arsenal.ImageMounter.DeviceFlags)">
 <summary>
 Modifies properties for an existing virtual disk.
 </summary>
 <param name="DeviceNumber">Device number of virtual disk to modify properties for.</param>
 <param name="FlagsToChange">Flags for which to change values for.</param>
 <param name="FlagValues">New flag values.</param>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.ExtendSize(System.UInt32,System.Int64)">
 <summary>
 Extends size of an existing virtual disk.
 </summary>
 <param name="DeviceNumber">Device number of virtual disk to modify.</param>
 <param name="ExtendSize">Number of bytes to extend.</param>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.CheckDriverVersion">
 <summary>
 Checks if version of running Arsenal Image Mounter SCSI miniport servicing this device object is compatible with this API
 library. If this device object is not created by Arsenal Image Mounter SCSI miniport, an exception is thrown.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.CheckDriverVersion(Microsoft.Win32.SafeHandles.SafeFileHandle)">
 <summary>
 Checks if version of running Arsenal Image Mounter SCSI miniport servicing this device object is compatible with this API
 library. If this device object is not created by Arsenal Image Mounter SCSI miniport, an exception is thrown.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.GetDriverSubVersion">
 <summary>
 Retrieves the sub version of the driver. This is not the same as the API compatibility version checked for by
 CheckDriverVersion method. The version record returned by this GetDriverSubVersion method can be used to find
 out whether the latest version of the driver is loaded, for example to show a dialog box asking user whether to
 upgrade the driver. If driver does not support this version query, this method returns Nothing/null.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.RescanBus">
 <summary>
 Issues a SCSI bus rescan to find newly attached devices and remove missing ones.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.UpdateDiskProperties">
 <summary>
 Re-enumerates partitions on all disk drives currently connected to this adapter. No
 exceptions are thrown on error, but any exceptions from underlying API calls are logged
 to trace log.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.UpdateDiskProperties(System.UInt32)">
 <summary>
 Re-enumerates partitions on specified disk currently connected to this adapter. No
 exceptions are thrown on error, but any exceptions from underlying API calls are logged
 to trace log.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.OpenDevice(System.UInt32,System.IO.FileAccess)">
 <summary>
 Opens a DiskDevice object for specified device number. Device numbers are created when
 a new virtual disk is created and returned in a reference parameter to CreateDevice
 method.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.OpenDevice(System.UInt32)">
 <summary>
 Opens a DiskDevice object for specified device number. Device numbers are created when
 a new virtual disk is created and returned in a reference parameter to CreateDevice
 method. This overload requests a DiskDevice object without read or write access, that
 can only be used to query metadata such as size, geometry, SCSI address etc.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.GetDeviceName(System.UInt32)">
 <summary>
 Returns a PhysicalDrive or CdRom device name for specified device number. Device numbers
 are created when a new virtual disk is created and returned in a reference parameter to
 CreateDevice method.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.GetRawDeviceName(System.UInt32)">
 <summary>
 Returns an NT device path to the physical device object that SCSI port driver has created for a mounted device.
 This device path can be used even if there is no functional driver attached to the device stack.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.ScsiAdapter.GetPnPDeviceName(System.UInt32,Arsenal.ImageMounter.IO.CmDevNodeRegistryProperty)">
 <summary>
 Returns a PnP registry property for the device object that SCSI port driver has created for a mounted device.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.DeviceProperties">
 <summary>
 Object storing properties for a virtual disk device. Returned by
 QueryDevice() method.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.DeviceProperties.DeviceNumber">
 <summary>Device number of virtual disk.</summary>
</member>
<member name="P:Arsenal.ImageMounter.DeviceProperties.DiskSize">
 <summary>Size of virtual disk.</summary>
</member>
<member name="P:Arsenal.ImageMounter.DeviceProperties.BytesPerSector">
 <summary>Number of bytes per sector for virtual disk geometry.</summary>
</member>
<member name="P:Arsenal.ImageMounter.DeviceProperties.ImageOffset">
 <summary>A skip offset if virtual disk data does not begin immediately at start of disk image file.
 Frequently used with image formats like Nero NRG which start with a file header not used by Arsenal Image Mounter
 or Windows filesystem drivers.</summary>
</member>
<member name="P:Arsenal.ImageMounter.DeviceProperties.Flags">
 <summary>Flags specifying properties for virtual disk. See comments for each flag value.</summary>
</member>
<member name="P:Arsenal.ImageMounter.DeviceProperties.Filename">
 <summary>Name of disk image file holding storage for file type virtual disk or used to create a
 virtual memory type virtual disk.</summary>
</member>
<member name="P:Arsenal.ImageMounter.DeviceProperties.WriteOverlayImageFile">
 <summary>Path to differencing file used in write-temporary mode.</summary>
</member>
</members>
</doc>
