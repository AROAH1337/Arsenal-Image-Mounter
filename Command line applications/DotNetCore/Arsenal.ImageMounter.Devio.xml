<?xml version="1.0"?>
<doc>
<assembly>
<name>
Arsenal.ImageMounter.Devio
</name>
</assembly>
<members>
<member name="T:Arsenal.ImageMounter.Devio.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderDLLWrapperBase">
 <summary>
 Class that implements <see>IDevioProvider</see> interface with an unmanaged DLL
 written for use with devio.exe command line tool.
 object as storage backend.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderFromStream">
 <summary>
 Class that implements <see>IDevioProvider</see> interface with a System.IO.Stream
 object as storage backend.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderFromStream.BaseStream">
 <summary>
 Stream object used by this instance.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderFromStream.OwnsBaseStream">
 <summary>
 Indicates whether base stream will be automatically closed when this
 instance is disposed.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderFromStream.#ctor(System.IO.Stream,System.Boolean)">
 <summary>
 Creates an object implementing IDevioProvider interface with I/O redirected
 to an object of a class derived from System.IO.Stream.
 </summary>
 <param name="Stream">Object of a class derived from System.IO.Stream.</param>
 <param name="ownsStream">Indicates whether Stream object will be automatically closed when this
 instance is disposed.</param>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderFromStream.CanWrite">
 <summary>
 Returns value of BaseStream.CanWrite.
 </summary>
 <value>Value of BaseStream.CanWrite.</value>
 <returns>Value of BaseStream.CanWrite.</returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderFromStream.Length">
 <summary>
 Returns value of BaseStream.Length.
 </summary>
 <value>Value of BaseStream.Length.</value>
 <returns>Value of BaseStream.Length.</returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderFromStream.CustomSectorSize">
 <summary>
 Returns a fixed value of 512.
 </summary>
 <value>512</value>
 <returns>512</returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderFromStream.SectorSize">
 <summary>
 Returns a fixed value of 512.
 </summary>
 <value>512</value>
 <returns>512</returns>
</member>
<member name="T:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderManagedBase">
 <summary>
 Base class for implementing <see>IDevioProvider</see> interface with a storage backend where
 bytes to read from and write to device are provided in a managed byte array.
 </summary>
</member>
<member name="E:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderManagedBase.Disposing">
 <summary>
 Event when object is about to be disposed
 </summary>
</member>
<member name="E:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderManagedBase.Disposed">
 <summary>
 Event when object has been disposed
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderManagedBase.CanWrite">
 <summary>
 Determines whether virtual disk is writable or read-only.
 </summary>
 <value>True if virtual disk can be written to through this instance, or False
 if it is opened for reading only.</value>
 <returns>True if virtual disk can be written to through this instance, or False
 if it is opened for reading only.</returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderManagedBase.SupportsShared">
 <summary>
 Indicates whether provider supports shared image operations with registrations
 and reservations.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderManagedBase.Length">
 <summary>
 Size of virtual disk.
 </summary>
 <value>Size of virtual disk.</value>
 <returns>Size of virtual disk.</returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderManagedBase.SectorSize">
 <summary>
 Sector size of virtual disk.
 </summary>
 <value>Sector size of virtual disk.</value>
 <returns>Sector size of virtual disk.</returns>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderManagedBase.Read(System.Byte[],System.Int32,System.Int32,System.Int64)">
 <summary>
 Reads bytes from virtual disk to a byte array.
 </summary>
 <param name="buffer">Byte array with enough size where read bytes are stored.</param>
 <param name="bufferoffset">Offset in array where bytes are stored.</param>
 <param name="count">Number of bytes to read from virtual disk device.</param>
 <param name="fileoffset">Offset at virtual disk device where read starts.</param>
 <returns>Returns number of bytes read from device that were stored in byte array.</returns>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderManagedBase.Write(System.Byte[],System.Int32,System.Int32,System.Int64)">
 <summary>
 Writes out bytes from byte array to virtual disk device.
 </summary>
 <param name="buffer">Byte array containing bytes to write out to device.</param>
 <param name="bufferoffset">Offset in array where bytes to write start.</param>
 <param name="count">Number of bytes to write to virtual disk device.</param>
 <param name="fileoffset">Offset at virtual disk device where write starts.</param>
 <returns>Returns number of bytes written to device.</returns>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderManagedBase.SharedKeys(Arsenal.ImageMounter.Devio.IMDPROXY_SHARED_REQ,Arsenal.ImageMounter.Devio.IMDPROXY_SHARED_RESP@,System.UInt64[]@)">
 <summary>
 Manage registrations and reservation keys for shared images.
 </summary>
 <param name="Request">Request data</param>
 <param name="Response">Response data</param>
 <param name="Keys">List of currently registered keys</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderManagedBase.Dispose">
 <summary>
 Releases all resources used by this instance.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderManagedBase.OnDisposing(System.EventArgs)">
 <summary>
 Raises Disposing event.
 </summary>
 <param name="e">Event arguments</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderManagedBase.OnDisposed(System.EventArgs)">
 <summary>
 Raises Disposed event.
 </summary>
 <param name="e">Event arguments</param>
</member>
<member name="T:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderUnmanagedBase">
 <summary>
 Base class for implementing <see>IDevioProvider</see> interface with a storage backend where
 bytes to read from and write to device are provided in an unmanaged memory area.
 </summary>
</member>
<member name="E:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderUnmanagedBase.Disposing">
 <summary>
 Event when object is about to be disposed
 </summary>
</member>
<member name="E:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderUnmanagedBase.Disposed">
 <summary>
 Event when object has been disposed
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderUnmanagedBase.CanWrite">
 <summary>
 Determines whether virtual disk is writable or read-only.
 </summary>
 <value>True if virtual disk can be written to through this instance, or False
 if it is opened for reading only.</value>
 <returns>True if virtual disk can be written to through this instance, or False
 if it is opened for reading only.</returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderUnmanagedBase.SupportsShared">
 <summary>
 Indicates whether provider supports shared image operations with registrations
 and reservations.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderUnmanagedBase.Length">
 <summary>
 Size of virtual disk.
 </summary>
 <value>Size of virtual disk.</value>
 <returns>Size of virtual disk.</returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderUnmanagedBase.SectorSize">
 <summary>
 Sector size of virtual disk.
 </summary>
 <value>Sector size of virtual disk.</value>
 <returns>Sector size of virtual disk.</returns>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderUnmanagedBase.Read(System.IntPtr,System.Int32,System.Int32,System.Int64)">
 <summary>
 Reads bytes from virtual disk to a memory area specified by a pointer to unmanaged memory.
 </summary>
 <param name="buffer">Pointer to unmanaged memory where read bytes are stored.</param>
 <param name="bufferoffset">Offset in unmanaged memory buffer where bytes are stored.</param>
 <param name="count">Number of bytes to read from virtual disk device.</param>
 <param name="fileoffset">Offset at virtual disk device where read starts.</param>
 <returns>Returns number of bytes read from device that were stored at specified memory position.</returns>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderUnmanagedBase.Write(System.IntPtr,System.Int32,System.Int32,System.Int64)">
 <summary>
 Writes out bytes to virtual disk device from a memory area specified by a pointer to unmanaged memory.
 </summary>
 <param name="buffer">Pointer to unmanaged memory area containing bytes to write out to device.</param>
 <param name="bufferoffset">Offset in unmanaged memory buffer where bytes to write are located.</param>
 <param name="count">Number of bytes to write to virtual disk device.</param>
 <param name="fileoffset">Offset at virtual disk device where write starts.</param>
 <returns>Returns number of bytes written to device.</returns>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderUnmanagedBase.SharedKeys(Arsenal.ImageMounter.Devio.IMDPROXY_SHARED_REQ,Arsenal.ImageMounter.Devio.IMDPROXY_SHARED_RESP@,System.UInt64[]@)">
 <summary>
 Manage registrations and reservation keys for shared images.
 </summary>
 <param name="Request">Request data</param>
 <param name="Response">Response data</param>
 <param name="Keys">List of currently registered keys</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderUnmanagedBase.Dispose">
 <summary>
 Releases all resources used by this instance.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderUnmanagedBase.OnDisposing(System.EventArgs)">
 <summary>
 Raises Disposing event.
 </summary>
 <param name="e">Event arguments</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderUnmanagedBase.OnDisposed(System.EventArgs)">
 <summary>
 Raises Disposed event.
 </summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderWithFakeMBR.Disposing">
 <summary>
 Event when object is about to be disposed
 </summary>
</member>
<member name="E:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderWithFakeMBR.Disposed">
 <summary>
 Event when object has been disposed
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderWithFakeMBR.OnDisposing(System.EventArgs)">
 <summary>
 Raises Disposing event.
 </summary>
 <param name="e">Event arguments</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.GenericProviders.DevioProviderWithFakeMBR.OnDisposed(System.EventArgs)">
 <summary>
 Raises Disposed event.
 </summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Arsenal.ImageMounter.Devio.Server.GenericProviders.DummyProvider.Disposing">
 <summary>
 Event when object is about to be disposed
 </summary>
</member>
<member name="E:Arsenal.ImageMounter.Devio.Server.GenericProviders.DummyProvider.Disposed">
 <summary>
 Event when object has been disposed
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory">
 <summary>
 Support routines for creating provider and service instances given a known proxy provider.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.ProviderType">
 <summary>
 Supported proxy types.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.VirtualDiskAccess">
 <summary>
 Virtual disk access modes. A list of supported modes for a particular ProviderType
 is obtained by calling GetSupportedVirtualDiskAccess().
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.AutoMount(System.String,Arsenal.ImageMounter.ScsiAdapter,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.ProviderType,Arsenal.ImageMounter.DeviceFlags,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.VirtualDiskAccess)">
 <summary>
 Creates an object, of a DevioServiceBase derived class, to support devio proxy server end
 for servicing I/O requests to a specified image file. Once that is done, this method
 automatically calls Arsenal Image Mounter to create a virtual disk device for this
 image file.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="Adapter">Open ScsiAdapter object for communication with Arsenal Image Mounter.</param>
 <param name="Flags">Additional flags to pass to ScsiAdapter.CreateDevice(). For example,
 this could specify a flag for read-only mounting.</param>
 <param name="ProviderType">One of known image libraries that can handle specified image file.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.AutoMount(System.String,Arsenal.ImageMounter.ScsiAdapter,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.ProviderType,Arsenal.ImageMounter.DeviceFlags)">
 <summary>
 Creates an object, of a DevioServiceBase derived class, to support devio proxy server end
 for servicing I/O requests to a specified image file. Once that is done, this method
 automatically calls Arsenal Image Mounter to create a virtual disk device for this
 image file.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="Adapter">Open ScsiAdapter object for communication with Arsenal Image Mounter.</param>
 <param name="Flags">Additional flags to pass to ScsiAdapter.CreateDevice(). For example,
 this could specify a flag for read-only mounting.</param>
 <param name="ProviderType">One of known image libraries that can handle specified image file.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetDiscUtilsVirtualDisk(System.String,System.IO.FileAccess,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.ProviderType)">
 <summary>
 Creates an object, of a DiscUtils.VirtualDisk derived class, for any supported image files format.
 For image formats not directly supported by DiscUtils.dll, this creates a devio provider first which
 then is opened as a DiscUtils.VirtualDisk wrapper object so that DiscUtils virtual disk features can
 be used on the image anyway.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
 <param name="ProviderType">One of known image libraries that can handle specified image file.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.OpenOVA(System.String,System.IO.FileAccess)">
 <summary>
 Opens a VMDK image file embedded in an OVA archive.
 </summary>
 <param name="imagefile">Path to OVA archive file</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
 <returns></returns>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetProvider(System.String,System.IO.FileAccess,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.ProviderType)">
 <summary>
 Creates an object, of an IDevioProvider implementing class, to support devio proxy server end
 for servicing I/O requests to a specified image file. This does not create a DevioServiceBase
 object that can actually serve incoming requests, it just creates the provider object that can
 be used with a later created DevioServiceBase object.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
 <param name="ProviderType">One of known image libraries that can handle specified image file.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetProvider(System.String,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.VirtualDiskAccess,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.ProviderType)">
 <summary>
 Creates an object, of an IDevioProvider implementing class, to support devio proxy server end
 for servicing I/O requests to a specified image file. This does not create a DevioServiceBase
 object that can actually serve incoming requests, it just creates the provider object that can
 be used with a later created DevioServiceBase object.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
 <param name="ProviderType">One of known image libraries that can handle specified image file.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetService(System.String,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.VirtualDiskAccess,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.ProviderType)">
 <summary>
 Creates an object, of a DevioServiceBase derived class, to support devio proxy server end
 for servicing I/O requests to a specified image file.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
 <param name="ProviderType">One of known image libraries that can handle specified image file.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetService(System.String,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.VirtualDiskAccess,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.ProviderType,System.Boolean)">
 <summary>
 Creates an object, of a DevioServiceBase derived class, to support devio proxy server end
 for servicing I/O requests to a specified image file.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
 <param name="ProviderType">One of known image libraries that can handle specified image file.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetService(System.String,System.IO.FileAccess,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.ProviderType)">
 <summary>
 Creates an object, of a DevioServiceBase derived class, to support devio proxy server end
 for servicing I/O requests to a specified image file.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
 <param name="ProviderType">One of known image libraries that can handle specified image file.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetProviderDiscUtils(System.String,System.IO.FileAccess)">
 <summary>
 Creates an object, of an IDevioProvider implementing class, to support devio proxy server end
 for servicing I/O requests to a specified image file using DiscUtils library.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetProviderDiscUtils(System.String,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.VirtualDiskAccess)">
 <summary>
 Creates an object, of an IDevioProvider implementing class, to support devio proxy server end
 for servicing I/O requests to a specified image file using DiscUtils library.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetProviderMultiPartRaw(System.String,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.VirtualDiskAccess)">
 <summary>
 Creates an object, of an IDevioProvider implementing class, to support devio proxy server end
 for servicing I/O requests to a specified set of multi-part raw image files.
 </summary>
 <param name="Imagefile">First part image file.</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetProviderMultiPartRaw(System.String,System.IO.FileAccess)">
 <summary>
 Creates an object, of an IDevioProvider implementing class, to support devio proxy server end
 for servicing I/O requests to a specified set of multi-part raw image files.
 </summary>
 <param name="Imagefile">First part image file.</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetProviderMultiPartRaw(System.String,System.IO.FileAccess,System.IO.FileShare)">
 <summary>
 Creates an object, of an IDevioProvider implementing class, to support devio proxy server end
 for servicing I/O requests to a specified set of multi-part raw image files.
 </summary>
 <param name="Imagefile">First part image file.</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetProviderLibQcow(System.String,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.VirtualDiskAccess)">
 <summary>
 Creates an object, of an IDevioProvider implementing class, to support devio proxy server end
 for servicing I/O requests to a specified image file using libewf library.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetProviderLibQcow(System.String,System.IO.FileAccess)">
 <summary>
 Creates an object, of an IDevioProvider implementing class, to support devio proxy server end
 for servicing I/O requests to a specified image file using libqcow library.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetProviderLibEwf(System.String,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.VirtualDiskAccess)">
 <summary>
 Creates an object, of an IDevioProvider implementing class, to support devio proxy server end
 for servicing I/O requests to a specified image file using libqcow library.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetProviderLibEwf(System.String,System.IO.FileAccess)">
 <summary>
 Creates an object, of an IDevioProvider implementing class, to support devio proxy server end
 for servicing I/O requests to a specified image file using libewf library.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="DiskAccess">Read or read/write access to image file and virtual disk device.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetProviderLibAFF4(System.String,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.VirtualDiskAccess)">
 <summary>
 Creates an object, of an IDevioProvider implementing class, to support devio proxy server end
 for servicing I/O requests to a specified image file using libaff4 library.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="DiskAccess">Only read access to image file supported.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetProviderLibAFF4(System.String,System.IO.FileAccess)">
 <summary>
 Creates an object, of an IDevioProvider implementing class, to support devio proxy server end
 for servicing I/O requests to a specified image file using libaff4 library.
 </summary>
 <param name="Imagefile">Image file.</param>
 <param name="DiskAccess">Only read access supported.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetProviderLibAFF4(System.String)">
 <summary>
 Creates an object, of an IDevioProvider implementing class, to support devio proxy server end
 for servicing I/O requests to a specified image file using libaff4 library.
 </summary>
 <param name="Imagefile">Image file.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.GetProviderLibAFF4(System.String,System.Int32)">
 <summary>
 Creates an object, of an IDevioProvider implementing class, to support devio proxy server end
 for servicing I/O requests to a specified image file using libaff4 library.
 </summary>
 <param name="containerfile">Container file containing image to mount.</param>
 <param name="index">Index of image to mount within container file.</param>
</member>
<member name="T:Arsenal.ImageMounter.Devio.Server.Services.DevioNoneService">
 <summary>
 Class deriving from DevioServiceBase, but without providing a proxy service. Instead,
 it just passes a disk image file name or RAM disk information for direct mounting
 internally in Arsenal Image Mounter SCSI Adapter.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioNoneService.Imagefile">
 <summary>
 Name and path of image file mounted by Arsenal Image Mounter.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioNoneService.DiskAccess">
 <summary>
 FileAccess flags specifying whether to mount read-only or read-write.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioNoneService.#ctor(System.String,System.IO.FileAccess)">
 <summary>
 Creates a DevioServiceBase compatible object, but without providing a proxy service.
 Instead, it just passes a disk image file name for direct mounting internally in
 SCSI Adapter.
 </summary>
 <param name="Imagefile">Name and path of image file mounted by Arsenal Image Mounter.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioNoneService.#ctor(System.String,System.Int64,System.IO.FileAccess)">
 <summary>
 Creates a DevioServiceBase compatible object, but without providing a proxy service.
 Instead, it just passes a disk image file name for direct mounting internally in
 SCSI Adapter.
 </summary>
 <param name="Imagefile">Name and path of image file mounted by Arsenal Image Mounter.</param>
 <param name="length">Disk size to initialize dummy provider instance</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioNoneService.#ctor(System.String,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.VirtualDiskAccess)">
 <summary>
 Creates a DevioServiceBase compatible object, but without providing a proxy service.
 Instead, it just passes a disk image file name for direct mounting internally in
 SCSI Adapter.
 </summary>
 <param name="Imagefile">Name and path of image file mounted by Arsenal Image Mounter.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioNoneService.#ctor(System.String,System.Int64,Arsenal.ImageMounter.Devio.Server.Interaction.DevioServiceFactory.VirtualDiskAccess)">
 <summary>
 Creates a DevioServiceBase compatible object, but without providing a proxy service.
 Instead, it just passes a disk image file name for direct mounting internally in
 SCSI Adapter.
 </summary>
 <param name="Imagefile">Name and path of image file mounted by Arsenal Image Mounter.</param>
 <param name="length">Disk size to initialize dummy provider instance</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioNoneService.#ctor(System.Int64)">
 <summary>
 Creates a DevioServiceBase compatible object, but without providing a proxy service.
 Instead, it just passes a disk size for directly mounting a RAM disk internally in
 SCSI Adapter.
 </summary>
 <param name="DiskSize">Size in bytes of RAM disk to create.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioNoneService.#ctor(System.String)">
 <summary>
 Creates a DevioServiceBase compatible object, but without providing a proxy service.
 Instead, it just requests the SCSI adapter, awealloc and vhdaccess drivers to create
 a dynamically expanding RAM disk based on the contents of the supplied VHD image.
 </summary>
 <param name="Imagefile">Path to VHD image file to use as template for the RAM disk.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioNoneService.StartServiceThread">
 <summary>
 Dummy implementation that always returns True.
 </summary>
 <returns>Fixed value of True.</returns>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioNoneService.RunService">
 <summary>
 Dummy implementation that just raises ServiceReady event.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase">
 <summary>
 Base class for classes that implement functionality for acting as server end of
 Devio communication. Derived classes implement communication mechanisms and
 use an object implementing <see>IDevioProvider</see> interface as storage backend
 for I/O requests received from client.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.DevioProvider">
 <summary>
 IDevioProvider object used by this instance.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.ScsiAdapter">
 <summary>
 ScsiAdapter object used when StartServiceThreadAndMount was called. This object
 is used to remove the device when DismountAndStopServiceThread is called.
 </summary>
 <returns></returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.OwnsProvider">
 <summary>
 Indicates whether DevioProvider will be automatically closed when this instance
 is disposed.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.DiskSize">
 <summary>
 Size of virtual disk device.
 </summary>
 <value>Size of virtual disk device.</value>
 <returns>Size of virtual disk device.</returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.Offset">
 <summary>
 Offset in disk image where this virtual disk device begins.
 </summary>
 <value>Offset in disk image where this virtual disk device begins.</value>
 <returns>Offset in disk image where this virtual disk device begins.</returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.SectorSize">
 <summary>
 Sector size of virtual disk device.
 </summary>
 <value>Sector size of virtual disk device.</value>
 <returns>Sector size of virtual disk device.</returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.Description">
 <summary>
 Description of service.
 </summary>
 <value>Description of service.</value>
 <returns>Description of service.</returns>
</member>
<member name="E:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.ServiceReady">
 <summary>
 Event raised when service thread is ready to start accepting connection from a client.
 </summary>
</member>
<member name="E:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.ServiceInitFailed">
 <summary>
 Event raised when service initialization fails.
 </summary>
</member>
<member name="E:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.DiskDeviceCreated">
 <summary>
 Event raised when an Arsenal Image Mounter Disk Device is created by with this instance.
 </summary>
</member>
<member name="E:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.ServiceStopping">
 <summary>
 Event raised when any of the DismountAndStopServiceThread methods are called, before
 disk device object is removed. Note that this event is not raised if device is directly
 removed by some other method.
 </summary>
</member>
<member name="E:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.ServiceShutdown">
 <summary>
 Event raised when service thread exits.
 </summary>
</member>
<member name="E:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.ServiceUnhandledException">
 <summary>
 Event raised when an unhandled exception occurs in service thread and thread is about to terminate,
 but before associated virtual disk device is forcefully removed, as specified by ForceRemoveDiskDeviceOnCrash
 property.
 </summary>
</member>
<member name="E:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.StopServiceThread">
 <summary>
 Event raised to stop service thread. Service thread handle this event by preparing communication for
 disconnection.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.#ctor(Arsenal.ImageMounter.Devio.Server.GenericProviders.IDevioProvider,System.Boolean)">
 <summary>
 Creates a new service instance with enough data to later run a service that acts as server end in Devio
 communication.
 </summary>
 <param name="DevioProvider">IDevioProvider object to that serves as storage backend for this service.</param>
 <param name="OwnsProvider">Indicates whether DevioProvider object will be automatically closed when this
 instance is disposed.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.RunService">
 <summary>
 When overridden in a derived class, runs service that acts as server end in Devio communication. It will
 first wait for a client to connect, then serve client I/O requests and when client finally requests service to
 terminate, this method returns to caller. To run service in a worker thread that automatically disposes this
 object after client disconnection, call StartServiceThread() instead.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.EmergencyStopServiceThread">
 <summary>
 When overridden in a derived class, immediately stop service thread. This method will be called internally when
 service base class methods for example detect that the device object no longer exists in the driver, or similar
 scenarios where the driver cannot be requested to request service thread to shut down.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.StartServiceThread">
 <summary>
 Creates a worker thread where RunService() method is called. After that method exits, this instance is automatically
 disposed.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.WaitForServiceThreadExit(System.TimeSpan)">
 <summary>
 Waits for service thread created by StartServiceThread() to exit. If no service thread
 has been created or if it has already exit, this method returns immediately with a
 value of True.
 </summary>
 <param name="timeout">Timeout value, or Timeout.Infinite to wait infinitely.</param>
 <returns>Returns True if service thread has exit or no service thread has been
 created, or False if timeout occurred.</returns>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.WaitForServiceThreadExit">
 <summary>
 Waits for service thread created by StartServiceThread() to exit. If no service thread
 has been created or if it has already exit, this method returns immediately.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.StartServiceThreadAndMount(Arsenal.ImageMounter.ScsiAdapter,Arsenal.ImageMounter.DeviceFlags)">
 <summary>
 Combines a call to StartServiceThread() with a call to API to create a proxy type
 Arsenal Image Mounter Disk Device that uses the started service as storage backend.
 </summary>
 <param name="Flags">Flags to pass to API.CreateDevice() combined with fixed flag
 values specific to this instance. Example of such fixed flag values are flags specifying
 proxy operation and which proxy communication protocol to use, which therefore do not
 need to be specified in this parameter. A common value to pass however, is DeviceFlags.ReadOnly
 to create a read-only virtual disk device.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.DismountAndStopServiceThread">
 <summary>
 Dismounts an Arsenal Image Mounter Disk Device created by StartServiceThreadAndMount() and waits
 for service thread of this instance to exit.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.DismountAndStopServiceThread(System.TimeSpan)">
 <summary>
 Dismounts an Arsenal Image Mounter Disk Device created by StartServiceThreadAndMount() and waits
 for service thread of this instance to exit.
 </summary>
 <param name="timeout">Timeout value to wait for service thread exit, or Timeout.Infinite to wait infinitely.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.RemoveDeviceAndStopServiceThread">
 <summary>
 Dismounts an Arsenal Image Mounter Disk Device created by StartServiceThreadAndMount(). If device
 was already removed, it calls EmergencyStopServiceThread() to notify service thread.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.AdditionalFlags">
 <summary>
 Additional flags that will be passed to API.CreateDevice() in StartServiceThreadAndMount()
 method. Default value of this property depends on derived class and which parameters are normally
 needed for driver to start communication with this service.
 </summary>
 <value>Default value of this property depends on derived class and which parameters are normally
 needed for driver to start communication with this service.</value>
 <returns>Default value of this property depends on derived class and which parameters are normally
 needed for driver to start communication with this service.</returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.ProxyModeFlags">
 <summary>
 When overridden in a derived class, indicates additional flags that will be passed to
 API.CreateDevice() in StartServiceThreadAndMount() method. Value of this property depends
 on derived class and which parameters are normally needed for driver to start communication with this
 service.
 </summary>
 <value>Default value of this property depends on derived class and which parameters are normally
 needed for driver to start communication with this service.</value>
 <returns>Default value of this property depends on derived class and which parameters are normally
 needed for driver to start communication with this service.</returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.ProxyObjectName">
 <summary>
 Object name that Arsenal Image Mounter can use to connect to this service.
 </summary>
 <value>Object name string.</value>
 <returns>Object name that Arsenal Image Mounter can use to connect to this service.</returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.WriteOverlayImageName">
 <summary>
 Path to write overlay image to pass to driver when a virtual disk is created for this service.
 </summary>
 <value>Path to write overlay image to pass to driver.</value>
 <returns>Path to write overlay image to pass to driver.</returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.DiskDeviceNumber">
 <summary>
 After successful call to StartServiceThreadAndMount(), this property returns disk device
 number for created Arsenal Image Mounter Disk Device. This number can be used when calling API
 functions. If no Arsenal Image Mounter Disk Device has been created by this instance, an exception is
 thrown. Use HasDiskDevice property to find out if a disk device has been created.
 </summary>
 <value>Disk device
 number for created Arsenal Image Mounter Disk Device.</value>
 <returns>Disk device
 number for created Arsenal Image Mounter Disk Device.</returns>
 <remarks></remarks>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.HasDiskDevice">
 <summary>
 Use HasDiskDevice property to find out if a disk device has been created in a call to
 StartServiceThreadAndMount() method. Use DiskDeviceNumber property to find out disk
 device number for created device.
 </summary>
 <value>Returns True if an Arsenal Image Mounter Disk Device has been created, False otherwise.</value>
 <returns>Returns True if an Arsenal Image Mounter Disk Device has been created, False otherwise.</returns>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.OpenDiskDevice(System.IO.FileAccess)">
 <summary>
 Opens a DiskDevice object for direct access to a mounted device provided by
 this service instance.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.GetDiskDeviceName">
 <summary>
 Returns a PhysicalDrive or CdRom device name for a mounted device provided by
 this service instance.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.SetWriteOverlayDeleteOnClose">
 <summary>
 Deletes the write overlay image file after use. Also sets this filter driver to
 silently ignore flush requests to improve performance when integrity of the write
 overlay image is not needed for future sessions.
 </summary>
 <returns>Returns 0 on success or Win32 error code on failure</returns>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.ForceRemoveDiskDeviceOnCrash">
 <summary>
 Indicates whether Arsenal Image Mounter Disk Device created by this instance will be automatically
 forcefully removed if a crash occurs in service thread of this instance. Default is True.
 </summary>
 <value>Indicates whether Arsenal Image Mounter Disk Device created by this instance will be automatically
 forcefully removed if a crash occurs in service thread of this instance. Default is True.</value>
 <returns>Indicates whether Arsenal Image Mounter Disk Device created by this instance will be automatically
 forcefully removed if a crash occurs in service thread of this instance. Default is True.</returns>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioServiceBase.Dispose">
 <summary>
 Releases all resources used by this instance.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.Devio.Server.Services.DevioShmService">
 <summary>
 Class that implements server end of Devio shared memory based communication
 protocol. It uses an object implementing <see>IDevioProvider</see> interface as
 storage backend for I/O requests received from client.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioShmService.ObjectName">
 <summary>
 Object name of shared memory file mapping object created by this instance.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioShmService.BufferSize">
 <summary>
 Size of the memory block that is shared between driver and this service.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioShmService.MaxTransferSize">
 <summary>
 Largest size of an I/O transfer between driver and this service. This
 number depends on the size of the memory block that is shared between
 driver and this service.
 </summary>
</member>
<member name="F:Arsenal.ImageMounter.Devio.Server.Services.DevioShmService.DefaultBufferSize">
 <summary>
 Buffer size that will be automatically selected on this platform when
 an instance is created by a constructor without a BufferSize argument.
 
 Corresponds to MaximumTransferLength that driver reports to
 storage port driver. This is the largest possible size of an
 I/O request from the driver.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioShmService.#ctor(System.String,Arsenal.ImageMounter.Devio.Server.GenericProviders.IDevioProvider,System.Boolean,System.Int64)">
 <summary>
 Creates a new service instance with enough data to later run a service that acts as server end in Devio
 shared memory based communication.
 </summary>
 <param name="ObjectName">Object name of shared memory file mapping object created by this instance.</param>
 <param name="DevioProvider">IDevioProvider object to that serves as storage backend for this service.</param>
 <param name="OwnsProvider">Indicates whether DevioProvider object will be automatically closed when this
 instance is disposed.</param>
 <param name="BufferSize">Buffer size to use for shared memory I/O communication between driver and this service.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioShmService.#ctor(System.String,Arsenal.ImageMounter.Devio.Server.GenericProviders.IDevioProvider,System.Boolean)">
 <summary>
 Creates a new service instance with enough data to later run a service that acts as server end in Devio
 shared memory based communication. A default buffer size will be used.
 </summary>
 <param name="ObjectName">Object name of shared memory file mapping object created by this instance.</param>
 <param name="DevioProvider">IDevioProvider object to that serves as storage backend for this service.</param>
 <param name="OwnsProvider">Indicates whether DevioProvider object will be automatically closed when this
 instance is disposed.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioShmService.#ctor(Arsenal.ImageMounter.Devio.Server.GenericProviders.IDevioProvider,System.Boolean)">
 <summary>
 Creates a new service instance with enough data to later run a service that acts as server end in Devio
 shared memory based communication. A default buffer size and a random object name will be used.
 </summary>
 <param name="DevioProvider">IDevioProvider object to that serves as storage backend for this service.</param>
 <param name="OwnsProvider">Indicates whether DevioProvider object will be automatically closed when this
 instance is disposed.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioShmService.#ctor(Arsenal.ImageMounter.Devio.Server.GenericProviders.IDevioProvider,System.Boolean,System.Int64)">
 <summary>
 Creates a new service instance with enough data to later run a service that acts as server end in Devio
 shared memory based communication. A random object name will be used.
 </summary>
 <param name="DevioProvider">IDevioProvider object to that serves as storage backend for this service.</param>
 <param name="OwnsProvider">Indicates whether DevioProvider object will be automatically closed when this
 instance is disposed.</param>
 <param name="BufferSize">Buffer size to use for shared memory I/O communication.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioShmService.RunService">
 <summary>
 Runs service that acts as server end in Devio shared memory based communication. It will first wait for
 a client to connect, then serve client I/O requests and when client finally requests service to terminate, this
 method returns to caller. To run service in a worker thread that automatically disposes this object after client
 disconnection, call StartServiceThread() instead.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.Devio.Server.Services.DevioTcpService">
 <summary>
 Class that implements server end of Devio TCP/IP based communication protocol.
 It uses an object implementing <see>IDevioProvider</see> interface as storage backend
 for I/O requests received from client.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.Services.DevioTcpService.ListenEndPoint">
 <summary>
 Server endpoint where this service listens for client connection.
 </summary>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioTcpService.#ctor(System.Net.IPAddress,System.Int32,Arsenal.ImageMounter.Devio.Server.GenericProviders.IDevioProvider,System.Boolean)">
 <summary>
 Creates a new service instance with enough data to later run a service that acts as server end in Devio
 TCP/IP based communication.
 </summary>
 <param name="ListenAddress">IP address where service should listen for client connection.</param>
 <param name="ListenPort">IP port where service should listen for client connection.</param>
 <param name="DevioProvider">IDevioProvider object to that serves as storage backend for this service.</param>
 <param name="OwnsProvider">Indicates whether DevioProvider object will be automatically closed when this
 instance is disposed.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioTcpService.#ctor(System.Int32,Arsenal.ImageMounter.Devio.Server.GenericProviders.IDevioProvider,System.Boolean)">
 <summary>
 Creates a new service instance with enough data to later run a service that acts as server end in Devio
 TCP/IP based communication.
 </summary>
 <param name="ListenPort">IP port where service should listen for client connection. Instance will listen on all
 interfaces where this port is available.</param>
 <param name="DevioProvider">IDevioProvider object to that serves as storage backend for this service.</param>
 <param name="OwnsProvider">Indicates whether DevioProvider object will be automatically closed when this
 instance is disposed.</param>
</member>
<member name="M:Arsenal.ImageMounter.Devio.Server.Services.DevioTcpService.RunService">
 <summary>
 Runs service that acts as server end in Devio TCP/IP based communication. It will first wait for
 a client to connect, then serve client I/O requests and when client finally requests service to terminate, this
 method returns to caller. To run service in a worker thread that automatically disposes this object after client
 disconnection, call StartServiceThread() instead.
 </summary>
</member>
<member name="T:Arsenal.ImageMounter.Devio.Server.SpecializedProviders.DebugProvider">
 <summary>
 A class to support test cases to verify that correct data is received through providers
 compared to raw image files.
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.SpecializedProviders.DevioProviderLibEwf.ImagingParameters.MediaFlags">
 <summary>
 logical, physical
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.SpecializedProviders.DevioProviderLibEwf.ImagingParameters.MediaType">
 <summary>
 fixed, removable, optical, memory
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.SpecializedProviders.DevioProviderLibEwf.ImagingParameters.UseEWFFileFormat">
 <summary>
 ewf, smart, ftk, encase1, encase2, encase3, encase4, encase5, encase6, encase7, encase7-v2, linen5, linen6, linen7, ewfx
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.SpecializedProviders.DevioProviderLibEwf.ImagingParameters.CompressionMethod">
 <summary>
 deflate
 </summary>
</member>
<member name="P:Arsenal.ImageMounter.Devio.Server.SpecializedProviders.DevioProviderLibEwf.ImagingParameters.CompressionLevel">
 <summary>
 none, empty-block, fast, best
 </summary>
</member>
</members>
</doc>
